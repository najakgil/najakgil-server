name: Backend CI 
on:
  push:
    branches: [ main ] # 빌드 작업을 진행할 브랜치를 선택합니다.

jobs:
  deploy:
    runs-on: ubuntu-latest  
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: build

      - name: 스프링부트 애플리케이션 빌드 # (1)
        run: ./gradlew build
        # 스프링 부트 애플리케이션을 빌드합니다.

      - name: 도커 이미지 빌드 # (2)
        run: docker build -t najakgil/myprecious .
        # 스프링 부트 애플리케이션의 도커 이미지를 빌드합니다.
       
      - name: Docker Hub 로그인 # (3)
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
        # Docker Hub에 로그인합니다.

      - name: Docker Hub 퍼블리시 # (4)
        run: docker push najakgil/myprecious
       # 빌드한 도커 이미지를 Docker Hub에 푸시합니다.
       
      - name: get GitHub IP # (5)
        id: ip
        uses: najakgil/najakgil-server/public-ip@v1.2
      
      # Configure AWS Credentials (6) - AWS 접근 권한 취득(IAM)
      - name: Configure AWS Credentials # (6)
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
    
    # Add github ip to AWS (7)
      - name: Add GitHub IP to AWS # (7)
        run: | 
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
    
    # AWS EC2 Server Connect & Docker 명령어 실행 (8)
      - name: AWS EC2 Connection # (8)
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          password: ${{ secrets.EC2_PASSWORD }} 
          port: ${{ secrets.EC2_SSH_PORT }}
          timeout: 60s
          script: |
            sudo docker stop myprecious
            sudo docker rm myprecious
            sudo docker run -it -d -p 8080:8080 --name boot-prac-ci najakgil/myprecious
    
    # REMOVE Github IP FROM security group (9)
      - name: Remove IP FROM security group # (9)
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
